import socket
import requests
from datetime import datetime
from urllib.parse import urlparse

# Define common ports and weak HTTP headers
common_ports = [21, 22, 23, 25, 80, 110, 143, 443, 445, 3389]
weak_headers = ['X-Frame-Options', 'Content-Security-Policy', 'X-Content-Type-Options']

# Function to scan open ports
def scan_open_ports(host):
    open_ports = []
    print(f"Scanning open ports on {host}...")
    for port in common_ports:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(1)
                result = s.connect_ex((host, port))
                if result == 0:
                    open_ports.append(port)
        except socket.error:
            pass
    return open_ports

# Function to check HTTP headers for basic misconfigurations
def check_http_headers(url):
    misconfigured_headers = []
    print(f"Checking HTTP headers on {url}...")
    try:
        response = requests.get(url)
        for header in weak_headers:
            if header not in response.headers:
                misconfigured_headers.append(header)
    except requests.RequestException:
        print("Error: Unable to connect to the URL.")
    return misconfigured_headers

# Function to check for outdated software by identifying version numbers
def check_software_versions(url):
    print(f"Checking for software version information on {url}...")
    outdated_versions = []
    known_outdated = {
        'Apache': '2.4.46',  # Example outdated versions
        'nginx': '1.18.0'
    }
    try:
        response = requests.get(url)
        server_info = response.headers.get('Server')
        if server_info:
            for software, version in known_outdated.items():
                if software in server_info and version in server_info:
                    outdated_versions.append(f"{software} {version}")
    except requests.RequestException:
        print("Error: Unable to retrieve software version information.")
    return outdated_versions

# Main vulnerability scanner
def vulnerability_scan(target):
    # Parse URL to handle proper formatting
    parsed_url = urlparse(target)
    host = parsed_url.netloc if parsed_url.netloc else parsed_url.path

    # Ensure we use the correct protocol in the URL
    url = f"{parsed_url.scheme or 'http'}://{host}"

    print(f"\nStarting vulnerability scan on {url}")
    start_time = datetime.now()

    # Open ports scan
    open_ports = scan_open_ports(host)
    print("Open Ports:", open_ports if open_ports else "No common open ports detected.")

    # HTTP headers misconfiguration check
    misconfigurations = check_http_headers(url)
    print("Misconfigurations:", misconfigurations if misconfigurations else "No misconfigurations detected.")

    # Outdated software check
    outdated = check_software_versions(url)
    print("Outdated Software:", outdated if outdated else "No outdated software detected.")

    end_time = datetime.now()
    print("\nScan completed in:", end_time - start_time)

# Example usage
target = input("Enter the IP address or website to scan: ")
vulnerability_scan(target)
